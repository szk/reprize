#ifndef DEFAULT_RES_HPP_
#define DEFAULT_RES_HPP_

namespace reprize
{
namespace res
{
namespace def
{

// General
const static uInt32 def_breadth = 8;
const static uInt64 def_bit[] =
{
    (uInt64)0xffULL,
    (uInt64)0x81ULL,
    (uInt64)0x81ULL,
    (uInt64)0x81ULL,
    (uInt64)0x81ULL,
    (uInt64)0x81ULL,
    (uInt64)0x81ULL,
    (uInt64)0xffULL,
};

const static uInt32 filled_breadth = 8;
const static uInt64 filled_bit[] =
{
    (uInt64)0xffULL,
    (uInt64)0xffULL,
    (uInt64)0xffULL,
    (uInt64)0xffULL,
    (uInt64)0xffULL,
    (uInt64)0xffULL,
    (uInt64)0xffULL,
    (uInt64)0xffULL,
};

// Widget
const static uInt32 arrow_breadth = 16;
const static uInt64 arrow_bit[] =
{
    (uInt64)0x0ULL,
    (uInt64)0x2ULL,
    (uInt64)0x6ULL,
    (uInt64)0xeULL,
    (uInt64)0x1eULL,
    (uInt64)0x3eULL,
    (uInt64)0x7eULL,
    (uInt64)0xfeULL,
    (uInt64)0x1feULL,
    (uInt64)0x3feULL,
    (uInt64)0x7feULL,
    (uInt64)0x1eULL,
    (uInt64)0xeULL,
    (uInt64)0x6ULL,
    (uInt64)0x2ULL,
    (uInt64)0x0ULL,
};

const static uInt32 beam_breadth = 16;
const static uInt64 beam_bit[] =
{
    (uInt64)0x0ULL,
    (uInt64)0x4000ULL,
    (uInt64)0x6000ULL,
    (uInt64)0x7000ULL,
    (uInt64)0x7800ULL,
    (uInt64)0x7c00ULL,
    (uInt64)0x7e00ULL,
    (uInt64)0x7f00ULL,
    (uInt64)0x7f80ULL,
    (uInt64)0x7fc0ULL,
    (uInt64)0x7fe0ULL,
    (uInt64)0x7800ULL,
    (uInt64)0x7000ULL,
    (uInt64)0x6000ULL,
    (uInt64)0x4000ULL,
    (uInt64)0x0ULL,
};

const static uInt32 button_breadth = 16;
const static uInt64 button_bit[] =
{
    (uInt64)0x1ff8ULL,
    (uInt64)0x7ffeULL,
    (uInt64)0x7ffeULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0x7ffeULL,
    (uInt64)0x7ffeULL,
    (uInt64)0x1ff8ULL,
};

const static uInt32 thumb_breadth = 16;
const static uInt64 thumb_bit[] =
{
    (uInt64)0x0ff0ULL,
    (uInt64)0x3ffcULL,
    (uInt64)0x7ffeULL,
    (uInt64)0x7ffeULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
    (uInt64)0xffffULL,
};

const static uInt32 frame_breadth = 16;
const static uInt64 frame_bit[] =
{
    (uInt64)0xe007ULL,
    (uInt64)0x8001ULL,
    (uInt64)0x8001ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
    (uInt64)0x0000ULL,
};

const static uInt32 border_breadth = 16;
const static uInt64 border_bit[] =
{
    (uInt64)0x1ff8ULL,
    (uInt64)0x7ffeULL,
    (uInt64)0x6006ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0xc003ULL,
    (uInt64)0x6006ULL,
    (uInt64)0x7ffeULL,
    (uInt64)0x1ff8ULL,
};

// beacon
const static uInt32 rotate_breadth = 16;
const static uInt64 rotate_bit[] =
{
    (uInt64)0x0,
    (uInt64)0x80,
    (uInt64)0xc0,
    (uInt64)0x3e0,
    (uInt64)0xec0,
    (uInt64)0x880,
    (uInt64)0x1808,
    (uInt64)0x1008,
    (uInt64)0x1008,
    (uInt64)0x1018,
    (uInt64)0x110,
    (uInt64)0x370,
    (uInt64)0x7c0,
    (uInt64)0x300,
    (uInt64)0x100,
    (uInt64)0x0,
};

const static uInt32 translate_breadth = 16;
const static uInt64 translate_bit[] =
{
    (uInt64)0x0,
    (uInt64)0x100,
    (uInt64)0x380,
    (uInt64)0x7c0,
    (uInt64)0x100,
    (uInt64)0x1110,
    (uInt64)0x3118,
    (uInt64)0x7ffc,
    (uInt64)0x3118,
    (uInt64)0x1110,
    (uInt64)0x100,
    (uInt64)0x7c0,
    (uInt64)0x380,
    (uInt64)0x100,
    (uInt64)0x0,
    (uInt64)0x0,
};

const static uInt32 brush_breadth = 16;
const static uInt64 brush_bit[] =
{
    (uInt64)0x0,
    (uInt64)0x1c0,
    (uInt64)0x140,
    (uInt64)0x140,
    (uInt64)0x140,
    (uInt64)0x770,
    (uInt64)0x808,
    (uInt64)0x808,
    (uInt64)0xff8,
    (uInt64)0x808,
    (uInt64)0xaa8,
    (uInt64)0xaa8,
    (uInt64)0x1550,
    (uInt64)0x1550,
    (uInt64)0x3fe0,
    (uInt64)0x0,
};

const static uInt32 direction_breadth = 32;
const static uInt64 direction_bit[] =
{
    (uInt64)0x0,
    (uInt64)0x200,
    (uInt64)0x700,
    (uInt64)0x1800f80,
    (uInt64)0x3c01fc0,
    (uInt64)0x7e00fe0,
    (uInt64)0xff007f0,
    (uInt64)0x1ff803f8,
    (uInt64)0x3ffc03f8,
    (uInt64)0x7ffe07f0,
    (uInt64)0x3e7c0fe0,
    (uInt64)0x1c381fc0,
    (uInt64)0x8100f80,
    (uInt64)0x700,
    (uInt64)0x200,
    (uInt64)0x0,
    (uInt64)0x0,
    (uInt64)0x400000,
    (uInt64)0xe00000,
    (uInt64)0x1f00810,
    (uInt64)0x3f81c38,
    (uInt64)0x7f03e7c,
    (uInt64)0xfe07ffe,
    (uInt64)0x1fc03ffc,
    (uInt64)0x1fc01ff8,
    (uInt64)0xfe00ff0,
    (uInt64)0x7f007e0,
    (uInt64)0x3f803c0,
    (uInt64)0x1f00180,
    (uInt64)0xe00000,
    (uInt64)0x400000,
    (uInt64)0x0,
};

// Font
struct fn_dim
{
    uInt32 width, x, y;
    Char ch;
};

const static uInt32 micro_fn_height = 8;
const static uInt32 micro_fn_width = 4;
const static uInt64 micro_fn_bit[] =
{
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x2200257221319900ULL,
    (uInt64)0x2200225753109a20ULL,
    (uInt64)0x7663300220703970ULL,
    (uInt64)0x2022072006631220ULL,
    (uInt64)0x2022026702211100ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x840142022200000ULL,
    (uInt64)0x477222022200007ULL,
    (uInt64)0x6e25412773600070ULL,
    (uInt64)0x475222202200700ULL,
    (uInt64)0xa15142202207000ULL,
    (uInt64)0x770000070000ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x4000051423565520ULL,
    (uInt64)0x4000222213437520ULL,
    (uInt64)0x2070772206225020ULL,
    (uInt64)0x1000222203167000ULL,
    (uInt64)0x1103052207535020ULL,
    (uInt64)0x1001400000000ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x7104007777757727ULL,
    (uInt64)0x4272225541154425ULL,
    (uInt64)0x6401007747777725ULL,
    (uInt64)0x272224545444125ULL,
    (uInt64)0x2104207747747727ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x3751547577737777ULL,
    (uInt64)0x5571542511151555ULL,
    (uInt64)0x5551342757751353ULL,
    (uInt64)0x5551552551151571ULL,
    (uInt64)0x6557577571777756ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x231675555576777ULL,
    (uInt64)0x521245555521555ULL,
    (uInt64)0x22222255527357ULL,
    (uInt64)0x24212573524571ULL,
    (uInt64)0x24272551723561ULL,
    (uInt64)0x7030600000000000ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x3122104040102ULL,
    (uInt64)0x2332500362266362ULL,
    (uInt64)0x5572322557551550ULL,
    (uInt64)0x5572522572351550ULL,
    (uInt64)0x2577522542666370ULL,
    (uInt64)0x10070000000ULL,
    (uInt64)0x0ULL,
    (uInt64)0x0ULL,
    (uInt64)0x7612400000020000ULL,
    (uInt64)0x7322275555576663ULL,
    (uInt64)0x7022245255521155ULL,
    (uInt64)0x7062317273524155ULL,
    (uInt64)0x7022274551643163ULL,
    (uInt64)0x12403000000041ULL,
    (uInt64)0x0ULL,
};

const static uInt32 re_fn_height = 14;
const static fn_dim re_fn_coord[] =
{
    { 4, 1, 1, ' ' },
    { 4, 10, 1, '!' },
    { 6, 15, 1, '\"' },
    { 8, 22, 1, '#' },
    { 8, 31, 1, '$' },
    { 8, 40, 1, '%' },
    { 8, 49, 1, '&' },
    { 4, 58, 1, '\'' },
    { 6, 63, 1, '(' },
    { 6, 70, 1, ')' },
    { 8, 77, 1, '*' },
    { 8, 86, 1, '+' },
    { 4, 95, 1, ',' },
    { 7, 100, 1, '-' },
    { 4, 108, 1, '.' },
    { 8, 113, 1, '/' },

    { 8, 1, 15, '0' },
    { 8, 10, 15, '1' },
    { 8, 19, 15, '2' },
    { 8, 28, 15, '3' },
    { 8, 37, 15, '4' },
    { 8, 46, 15, '5' },
    { 8, 55, 15, '6' },
    { 8, 64, 15, '7' },
    { 8, 73, 15, '8' },
    { 8, 82, 15, '9' },
    { 4, 91, 15, ':' },
    { 4, 96, 15, ';' },
    { 7, 101, 15, '<' },
    { 8, 110, 15, '=' },
    { 7, 118, 15, '>' },

    { 8, 1, 29, '?' },

    { 8, 1, 43, '@' },
    { 8, 10, 43, 'A' },
    { 8, 19, 43, 'B' },
    { 8, 28, 43, 'C' },
    { 8, 37, 43, 'D' },
    { 8, 46, 43, 'E' },
    { 8, 55, 43, 'F' },
    { 8, 64, 43, 'G' },
    { 8, 73, 43, 'H' },
    { 4, 82, 43, 'I' },
    { 8, 87, 43, 'J' },
    { 8, 96, 43, 'K' },
    { 8, 105, 43, 'L' },
    { 8, 114, 43, 'M' },

    { 8, 1, 57, 'N' },
    { 8, 10, 57, 'O' },
    { 8, 19, 57, 'P' },
    { 8, 28, 57, 'Q' },
    { 8, 37, 57, 'R' },
    { 8, 46, 57, 'S' },
    { 8, 55, 57, 'T' },
    { 8, 64, 57, 'U' },
    { 8, 73, 57, 'V' },
    { 8, 82, 57, 'W' },
    { 8, 91, 57, 'X' },
    { 8, 100, 57, 'Y' },
    { 8, 109, 57, 'Z' },

    { 6, 1, 71, '[' },
    { 8, 8, 71, '\\' },
    { 6, 17, 71, ']' },
    { 8, 26, 71, '^' },
    { 8, 35, 71, '_' },

    { 4, 1, 85, '`' },
    { 8, 6, 85, 'a' },
    { 8, 15, 85, 'b' },
    { 8, 24, 85, 'c' },
    { 8, 33, 85, 'd' },
    { 8, 42, 85, 'e' },
    { 6, 51, 85, 'f' },
    { 8, 58, 85, 'g' },
    { 8, 67, 85, 'h' },
    { 4, 76, 85, 'i' },
    { 4, 81, 85, 'j' },
    { 8, 86, 85, 'k' },
    { 4, 95, 85, 'l' },
    { 8, 100, 85, 'm' },
    { 8, 109, 85, 'n' },
    { 8, 118, 85, 'o' },

    { 8, 1, 99, 'p' },
    { 8, 10, 99, 'q' },
    { 8, 19, 99, 'r' },
    { 8, 28, 99, 's' },
    { 6, 37, 99, 't' },
    { 8, 44, 99, 'u' },
    { 8, 53, 99, 'v' },
    { 8, 62, 99, 'w' },
    { 8, 71, 99, 'x' },
    { 8, 80, 99, 'y' },
    { 8, 89, 99, 'z' },
    { 6, 98, 99, '{' },
    { 4, 105, 99, '|' },
    { 6, 110, 99, '}' },
    { 8, 117, 99, '~' }
};

const static uInt64 re_fn_bit[] =
{
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x18000000000b0000ULL, (uInt64)0x18cULL,
    (uInt64)0x18386c1e0b0b1800ULL, (uInt64)0xc0000000000306ULL,
    (uInt64)0x186c763b1f8b1800ULL, (uInt64)0xc0000006030306ULL,
    (uInt64)0x86c360b0b001800ULL, (uInt64)0x600000060b4603ULL,
    (uInt64)0x383c0e0b001800ULL, (uInt64)0x60000006078603ULL,
    (uInt64)0xec180c0b001800ULL, (uInt64)0x3003e01f830603ULL,
    (uInt64)0x6c3c1c1f801800ULL, (uInt64)0x30000006078603ULL,
    (uInt64)0x6c5c340b000000ULL, (uInt64)0x180000060b4603ULL,
    (uInt64)0x6c5e3700001800ULL, (uInt64)0x18600306030306ULL,
    (uInt64)0xb8361e00001800ULL, (uInt64)0xc600300000306ULL,
    (uInt64)0x0ULL, (uInt64)0xc00030000018cULL,
    (uInt64)0x0ULL, (uInt64)0x100000000ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x1c1f8cc3c1e06078ULL, (uInt64)0xf0787eULL,
    (uInt64)0x6018cc6633070ccULL, (uInt64)0x18006000198cc60ULL,
    (uInt64)0x3018cc6030060ccULL, (uInt64)0x30003063198cc60ULL,
    (uInt64)0x1f0f8cc3830060ecULL, (uInt64)0x607c18631987830ULL,
    (uInt64)0x33180cc6018060fcULL, (uInt64)0xc0000c00198cc18ULL,
    (uInt64)0x33180f8600c060dcULL, (uInt64)0x600018001f0cc18ULL,
    (uInt64)0x33180c06006060ccULL, (uInt64)0x307c3000180cc18ULL,
    (uInt64)0x33198c06603060ccULL, (uInt64)0x180060630c0cc18ULL,
    (uInt64)0x1e0f0c03c3f06078ULL, (uInt64)0x630707818ULL,
    (uInt64)0x0ULL, (uInt64)0x600000000ULL,
    (uInt64)0x0ULL, (uInt64)0x200000000ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x78ULL, (uInt64)0x0ULL,
    (uInt64)0xccULL, (uInt64)0x0ULL,
    (uInt64)0xc0ULL, (uInt64)0x0ULL,
    (uInt64)0x60ULL, (uInt64)0x0ULL,
    (uInt64)0x30ULL, (uInt64)0x0ULL,
    (uInt64)0x30ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x30ULL, (uInt64)0x0ULL,
    (uInt64)0x30ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x3f1f87c3c1f0f000ULL, (uInt64)0x1080c663018cc3cULL,
    (uInt64)0x3018cc663319800ULL, (uInt64)0x1980c663018cc66ULL,
    (uInt64)0x3018cc663319878ULL, (uInt64)0x1f80c663018cc06ULL,
    (uInt64)0x3018cc061f198ccULL, (uInt64)0x1f80c363018cc06ULL,
    (uInt64)0x1f0f8cc06331f8acULL, (uInt64)0x1980c7e3018fc76ULL,
    (uInt64)0x3018cc0633198acULL, (uInt64)0x1980c663018cc66ULL,
    (uInt64)0x3018cc0633198ecULL, (uInt64)0x1980c663318cc66ULL,
    (uInt64)0x3018cc66331980cULL, (uInt64)0x1980c663318cc66ULL,
    (uInt64)0x31f87c3c1f198f8ULL, (uInt64)0x198fc661e18cc3cULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x3f0f07c3c1f0f0c4ULL, (uInt64)0xfc6633198cc66ULL,
    (uInt64)0xc198cc6633198ccULL, (uInt64)0xc06633198cc66ULL,
    (uInt64)0xc018cc6633198dcULL, (uInt64)0xc06633198cc66ULL,
    (uInt64)0xc030cc6633198fcULL, (uInt64)0x60661a198cc66ULL,
    (uInt64)0xc0607c661f198ecULL, (uInt64)0x30340c198cc66ULL,
    (uInt64)0xc0c0cc6603198ccULL, (uInt64)0x1818161f8cc66ULL,
    (uInt64)0xc180cc6603198ccULL, (uInt64)0xc18331f8cc66ULL,
    (uInt64)0xc198cc6603198ccULL, (uInt64)0xc18331986866ULL,
    (uInt64)0xc0f0cc3c030f0ccULL, (uInt64)0xfc1833108303cULL,
    (uInt64)0x180000000ULL, (uInt64)0x0ULL,
    (uInt64)0x100000000ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x603c003cULL, (uInt64)0x0ULL,
    (uInt64)0xb030060cULL, (uInt64)0x0ULL,
    (uInt64)0x19830060cULL, (uInt64)0x0ULL,
    (uInt64)0x300c0cULL, (uInt64)0x0ULL,
    (uInt64)0x300c0cULL, (uInt64)0x0ULL,
    (uInt64)0x30180cULL, (uInt64)0x0ULL,
    (uInt64)0x30180cULL, (uInt64)0x0ULL,
    (uInt64)0x30300cULL, (uInt64)0x0ULL,
    (uInt64)0x30300cULL, (uInt64)0x0ULL,
    (uInt64)0x30600cULL, (uInt64)0x0ULL,
    (uInt64)0x3f0003c603cULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x8ULL, (uInt64)0x100000000ULL,
    (uInt64)0xc000c00003000cULL, (uInt64)0x3018c6030ULL,
    (uInt64)0x6000c00003000cULL, (uInt64)0x301800030ULL,
    (uInt64)0xf0f0f0f83c1f1f0cULL, (uInt64)0xf07c3e3198c61f1ULL,
    (uInt64)0x986198cc66331980ULL, (uInt64)0x198cc563198c6331ULL,
    (uInt64)0x986198cc66331980ULL, (uInt64)0x198cc5630d8c6331ULL,
    (uInt64)0x9861f8cc06331980ULL, (uInt64)0x198cc5631f8c6331ULL,
    (uInt64)0x986018cc06331980ULL, (uInt64)0x198cc563198c6331ULL,
    (uInt64)0xf06198cc66331d80ULL, (uInt64)0x198cc563198c6331ULL,
    (uInt64)0x8060f0f83c1f1f00ULL, (uInt64)0xf0cc563198c6331ULL,
    (uInt64)0x9800000000000000ULL, (uInt64)0xc0001ULL,
    (uInt64)0xf000000000000000ULL, (uInt64)0x40000ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0xb818c6000000000ULL,
    (uInt64)0x18000000000ULL, (uInt64)0x6c30c3000000000ULL,
    (uInt64)0x18000000000ULL, (uInt64)0x30c3000000000ULL,
    (uInt64)0x8cc663c3c1f1f07cULL, (uInt64)0x30c30fc663315ULL,
    (uInt64)0x8cc66186633198ccULL, (uInt64)0x30c30c0663315ULL,
    (uInt64)0x8cc66180c33198ccULL, (uInt64)0x60c1860661a15ULL,
    (uInt64)0x8cc66181803198ccULL, (uInt64)0x30c3030660c15ULL,
    (uInt64)0x8cc66183003198ccULL, (uInt64)0x30c3018661615ULL,
    (uInt64)0x86866186603198ccULL, (uInt64)0x30c300c7c3315ULL,
    (uInt64)0x307c303c031f07cULL, (uInt64)0x30c30fc60331fULL,
    (uInt64)0x1800cULL, (uInt64)0x18c6000660000ULL,
    (uInt64)0x1800cULL, (uInt64)0x3c0000ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
    (uInt64)0x0ULL, (uInt64)0x0ULL,
};
}
}
}

#endif
